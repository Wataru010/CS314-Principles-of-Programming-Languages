(**********************************)
(* Problem 2: BST Remove *)
(**********************************)

(* let rec fold_preorder f acc t =
  match t with 
  Leaf -> acc
  | Node (Leaf,value,Leaf) -> (f acc value)
  | Node (Leaf,value,right) -> (fold_preorder f (f acc value) right)
  | Node (left,value,Leaf) ->  (fold_preorder f (f acc value) left)
  | Node (left,value,right) ->  fold_preorder f (fold_preorder f (f acc value) left) right *) 
  
  (* unused code *)
  (* let inorder_list = fold_inorder (fun acc x -> acc @ [x]) [] t in *)
  (* let preorder_list = fold_preorder (fun acc x -> acc @ [x]) [] t in
  (* return a node with min_value in a tree *)
  let rec min tree =
    match tree with
    Leaf -> Leaf
    | Node (Leaf, value, _) -> tree
    | Node (left, _, _) -> min left in
  (* return a node with max_value in a tree *)
  let rec max tree = 
    match tree with 
    Leaf -> Leaf
    | Node (_,_,Leaf) -> tree
    | Node (_,_,right) -> max right in
  (* find inorder predecessor *)
  let rec find_candidate_node x tree =
    match tree with
    Leaf -> Leaf
    | Node (left, value, right) ->
      if value = x then 
        let min_v = min right in
        let max_v = max left in
        match (max_v,min_v) with
        (Leaf,Leaf) -> print_int 1;Leaf
        | (Leaf,Node(_,_,_)) -> min_v
        | (Node(_,_,_),Leaf) -> max_v
        | (Node(_,_,_),Node(_,_,_)) -> min_v
      else if value < x then
        find_candidate_node x right
      else
        find_candidate_node x left in
  let candidate_node = find_candidate_node x t in
  let process = 
    match candidate_node with
    Leaf -> Leaf
    | Node (_,cand_v,_) -> 
      let rec process_cand_v list acc = 
        match list with
        [] -> acc
        | (h::t) ->
          if h = cand_v then
            process_cand_v t acc
          else
            process_cand_v t (h::acc) in
      let rec process_x list acc =
        match list with
        [] -> acc
        | (h::t) ->
          if h = x then
            process_x list (cand_v::acc)
          else
            process_x list (h::acc) in
      construct (List.rev(process_x (List.rev(process_cand_v preorder_list [])) [])) in process *)

(**********************************)
(* Problem 6: Simplification  *)
(**********************************)

(* let rec print_string_list lst =
  match lst with
  | [] -> ()
  | [x] -> print_string x; print_newline ()
  | x :: xs -> print_string x; print_string "; "; print_string_list xs

(* val map : ('a -> 'b) -> 'a list -> 'b list *)
(* val fold_left : ('acc -> 'a -> 'acc) -> 'acc -> 'a list -> 'acc *)
let list12 (e:expression) = List.map (fun a -> "+"^a)(String.split_on_char ('+') (to_string_wo_paren e));;
let list = List.map (fun a -> if (String.equal (String.sub (a) (0) (1) ) "+") then (String.sub (a) (1) (String.length (a)-1) ) else a) (List.fold_left (fun acc x -> acc@(List.map (fun a -> if (String.equal (String.sub (a) (0) (1) ) "+") then a else "0.0 - "^a) (String.split_on_char ('-') x))) [] (list12 (parse "3*x*x + 2*x - 5 + 4*x*x - 7*x")));;
print_string_list list;;
let x = (List.fold_left (fun acc a-> (parse a)::acc) [] list ) in x;;
print_string_list (list12 (parse "3*x*x + 2*x - 5 + 4*x*x - 7*x"));; *)

(* let rec print_tuple_list tuple_list =
  match tuple_list with
  | [] -> ()  (* Base case: an empty list, do nothing *)
  | (f, i) :: rest ->
    Printf.printf "(%f, %d) " f i;  (* Print the current tuple *)
    print_tuple_list rest  (* Recursively print the rest of the list *);;

let rec reduce exp acc = 
  match exp with
  Num v -> (v, 0)::acc
  | Var -> (1.0,1)::acc
  | Binop (op, e1, e2) -> 
    match op with 
    Add -> 
      let list_e1 = (reduce e1 []) in
      let list_e2 = (reduce e2 []) in
      let add = list_e1@list_e2 in
      (* print_tuple_list add; print_string "\n";  *)
      add; 
    | Sub ->
      let list_e1 = (reduce e1 []) in
      let list_e2 = (reduce e2 []) in
      let sub = list_e1@(List.map (fun (coef, power) -> ((-1.)*.coef, power)) list_e2) in
      (* print_tuple_list sub; print_string "\n";  *)
      sub; 
    | Mul ->
      let list_e1 = (reduce e1 []) in
      let list_e2 = (reduce e2 []) in
      let mul = List.fold_left (fun acc (coef2, power2) -> acc@(List.fold_left (fun acc (coef1, power1) -> acc@[(coef1*.coef2,power1+power2)]) [] list_e1)) [] list_e2 in
      (* print_tuple_list mul; print_string "\n";  *)
      mul;

let rec combine lst =
  let fun_fold acc term =
    let (coef1, power1) = term in
    if (List.length acc = 0) then
      acc@[term]
    else
      let t_f = List.fold_left (fun t_or_f (coef2, power2) -> if power1 = power2 then true else if t_or_f = true then true else false) false acc in 
      if t_f = true then
        (List.map (fun (coef3, power3) -> if power1 = power3 then (coef1+.coef3, power3) else (coef3, power3)) acc)
      else 
        acc@[term] in
  let curr_list = List.fold_left (fun_fold) [] lst in
  List.fold_left (fun acc (coef, power) -> if coef = 0.0 then acc else acc@[(coef, power)]) [] curr_list (*wipe out term with 0.0 as coefficient*)

let rec construct lst = 
  let rec build_poly (coef, power) =
    match power with
    0 -> (Num coef)
    | 1 -> 
      if coef = 1.0 then 
        Var 
      else
        (Binop (Mul, Num coef, Var)) 
    | _ -> (Binop (Mul, (Binop (Mul, Num coef, Var)), build_poly(1.0,power-1))) in
  let list_of_poly = List.map build_poly lst in
  if List.length list_of_poly > 0 then
    List.fold_left (fun acc a-> Binop (Add, acc, a)) (List.hd list_of_poly) (List.tl list_of_poly)
  else
    Num 0.0; *)